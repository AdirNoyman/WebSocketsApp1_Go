<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
    <title>Home</title>
    <style>
        .chatbox {

            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col">
            <h1 class="mt-3">This is the Home Page 🤓</h1>
            <hr>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8">
            <h3>Chat</h3>
            <p><a href="https://github.com" target="_blank">Go to github</a></p>
            <form>
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                    <label for="message">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>
                <hr>
                <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>
                <input type="hidden" name="action" id="action">
            </form>
            <hr>
            <div class="chatbox" id="output">

            </div>
        </div>
        <div class="col-md-4">
            <h3>Who's Online</h3>
            <ul id="online_users"></ul>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
<script>
    let socket = null;
    let chatBox = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");
    // Notify the websocket connection on user that left the session
    window.onbeforeunload = () => {
        console.log("User Leaving 😔")
        let jsonData = {};
        jsonData["action"] = "user_left";
        socket.send(JSON.stringify(jsonData));
    }
    // wait for the html page to load and only then connect to the websocket
    document.addEventListener("DOMContentLoaded", function (){
        // create websocket instance (on port 8080) and assign it to the socket variable.
        // 'ws' is like http in regular web page
        socket = new WebSocket("ws://127.0.0.1:8080/ws");

        socket.onopen = () => {

            console.log("WebSocket Connected successfully 😎🤟👏");

        }

        socket.onclose = () => {

            console.log("Connection closed 😒");
        }

        socket.onerror = error => {

            console.log("Sorry, there was an error 😬", error);
        }

        // 'onmessage' -> sent from the server via websocket, to the client
        socket.onmessage = msg => {

            // console.log("Incoming Message:\n", msg);
            // // Convert the json data in to Go object
            // let j = JSON.parse(msg.data)
            // console.log("Here is the parsed json",j);
            let data = JSON.parse(msg.data)
            console.log("Action is", data)
            console.log("Data is",data)

            switch (data.action) {
                // Display connected users
                case "list_users":
                    // Get the dom element that suppose to display the connected users
                    let ul = document.getElementById("online_users");
                    // Clear the list of connected users
                    while (ul.firstChild) ul.removeChild(ul.firstChild)
                    // Repopulate the list of connected users
                    if (data.connected_users.length > 0) {

                        data.connected_users.forEach(user => {
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(user));
                            ul.appendChild(li);
                        })
                    }
                    break;
                // Incoming message to display in the chat box
                case "broadcast":
                    chatBox.innerHTML = chatBox.innerHTML + data.message + "<br>";
                    break;

            }
        }

        let userInput = document.getElementById("username");
        userInput.addEventListener("change", function() {
            console.log("Change detected 🤓");
            let jsonData = {};
            jsonData["action"] = "username";
            // this.value = the data that was typed into to the username input field
            jsonData["username"] = this.value;
            // Send the data back to the server, as JSON
            socket.send(JSON.stringify(jsonData));
            console.log("Got here to send user",jsonData);

        })

        document.getElementById("message").addEventListener("keydown", event => {

            if (event.code === "Enter" || event.code === "NumpadEnter" ) {
                if (!socket) {

                    console.log("No connection 😢");
                    // Return false so we don't go anywhere
                    return false

                }

                if ((userField.value === "") || (messageField.value === "")) {

                    alert("Fill out user and message! 😡");
                    return false;
                } else {
                    event.preventDefault();
                    event.stopPropagation();
                    // Send the message the user entered to the web socket
                    sendMessage();
                }


            }
        })

        // Validate username and message fields before allowing the user to send a chat message
        document.getElementById("sendBtn").addEventListener("click", () => {

            if ((userField.value === "") || (messageField.value === "")) {

                alert("Fill out user and message! 😡");
                return false;
            } else {

                sendMessage();
            }


        })
    })
        const sendMessage = () => {

        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = document.getElementById("username").value;
        jsonData["message"] = document.getElementById("message").value;
        console.log("User message", jsonData);
        socket.send(JSON.stringify(jsonData));
        document.getElementById("message").value = "";
        }
</script>
</body>
</html>
